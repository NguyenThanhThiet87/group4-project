import React, { useEffect, useState } from "react";
import axios from "axios";
import "./UserList.css"; // b·∫°n c√≥ th·ªÉ t·∫°o file CSS ri√™ng n·∫øu mu·ªën
import { useNavigate } from "react-router-dom";

function UserList() {
  const [users, setUsers] = useState([]);
  const [editingUser, setEditingUser] = useState(null);
  const [formData, setFormData] = useState({ name: "", email: "" });
  const [loading, setLoading] = useState(true);
  const [deletingId, setDeletingId] = useState(null);
  const navigate = useNavigate();

  // üü¢ L·∫•y danh s√°ch ng∆∞·ªùi d√πng khi load trang
  useEffect(() => {
    fetchUsers();
 }, []);

  const fetchUsers = async () => {
    setLoading(true);
    try {
      // th·ª≠ hai endpoint ph·ªï bi·∫øn; n·∫øu server d√πng base path kh√°c th√¨ s·ª≠a ·ªü ƒë√¢y
        // fallback n·∫øu route kh√°c tr√™n backend (v√≠ d·ª• /user/users)
      let res = await axios.get("http://localhost:3000/user/users");

      // normalize response: c√≥ th·ªÉ server tr·∫£ m·∫£ng tr·ª±c ti·∫øp ho·∫∑c { users: [...] } ho·∫∑c { data: [...] }
      const data = res.data?.users ?? res.data?.data ?? res.data;
      if (!Array.isArray(data)) {
        console.warn("Unexpected users response shape:", res.data);
        throw new Error("Unexpected users response shape");
      }
      setUsers(data);
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch user:", err);
      // hi·ªÉn th·ªã l·ªói c·ª• th·ªÉ trong UI thay v√¨ ch·ªâ alert
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng! Xem console (Network) ƒë·ªÉ bi·∫øt chi ti·∫øt.");
    } finally {
      setLoading(false);
    }
  };

  // üü° X√≥a user
  const handleDelete = async (id) => {
    if (!id) return;
    const ok = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?");
    if (!ok) return;

    const token = localStorage.getItem("token");
    const headers = token ? { Authorization: `${token}` } : {};

    console.log(id)
    try {
      setDeletingId(id);
     
      // th·ª≠ fallback route
      await axios.delete(`http://localhost:3000/user/users/${id}`, { headers });

      // N·∫øu th√†nh c√¥ng x√≥a tr√™n UI
      setUsers((prev) => prev.filter((u) => u._id !== id));
      alert("ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng.");
    } catch (error) {
      console.error("L·ªói khi x√≥a user:", error);
      if (error.response) {
        if (error.response.status === 401 || error.response.status === 403) {
          alert("Kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng. Ch·ªâ admin ƒë∆∞·ª£c ph√©p.");
        } else {
          alert(`X√≥a th·∫•t b·∫°i: ${error.response.status} ${error.response.statusText}`);
        }
      } else {
        alert("X√≥a th·∫•t b·∫°i: Ki·ªÉm tra k·∫øt n·ªëi t·ªõi server.");
      }
    } finally {
      setDeletingId(null);
    }
  };

  // üîµ Khi nh·∫≠p li·ªáu trong form
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleLogout = async () => {
    const token = localStorage.getItem("token");
    const refreshToken = localStorage.getItem("refreshToken");

    try {
      await axios.post(
        "http://localhost:3000/auth/logout",
        { refreshToken },
        { headers: { Authorization: token } }
      );
    } catch (error) {
      console.error("Logout failed:", error);
    } finally {
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("user");
      navigate("/");
    }
  };


  if (loading) return <p>ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...</p>;

  return (
    <div className="admin-container">
      <h2>üë§ Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
      <button onClick={handleLogout} className="logout-btn">ƒêƒÉng xu·∫•t</button>

      {/* Danh s√°ch user */}
      <table className="user-table">
        <thead>
          <tr>
            <th>STT</th>
            <th>T√™n</th>
            <th>Email</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {users.length === 0 ? (
            <tr>
              <td colSpan="4">Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o.</td>
            </tr>
          ) : (
            users.map((u, i) => (
              <tr key={u._id}>
                <td>{i + 1}</td>
                <td>{u.name}</td>
                <td>{u.email}</td>
                <td>
                  <button className="delete-btn" onClick={() => handleDelete(u._id)}>X√≥a</button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}

export default UserList;
